name: Rebuild Bundles on Milkdown Crepe Update

on:
  schedule:
    - cron: '0 8 * * *' # Runs daily at 8:00 AM UTC
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  rebuild:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install npm-check-updates
        run: npm install -g npm-check-updates

      - name: Check for @milkdown/crepe updates
        id: check_updates
        run: |
          if ncu --target latest "@milkdown/crepe" | grep -q "All dependencies match the latest package versions"; then
            echo "No new version found."
            echo "changes=false" >> $GITHUB_ENV
          else
            echo "New version of @milkdown/crepe found. Proceeding with update."
            echo "changes=true" >> $GITHUB_ENV
            ncu -u --target latest "@milkdown/crepe"
          fi

      - name: Install dependencies
        run: npm install

      - name: Run build script
        run: npm run build

      - name: Get new version from package.json
        if: env.changes == 'true'
        id: get_version
        run: |
          echo "new_version=$(jq -r .dependencies[\"@milkdown/crepe\"] package.json | tr -d '^')" >> $GITHUB_ENV

      - name: Update package.json version
        if: env.changes == 'true'
        run: |
          npm version ${{ env.new_version }} --no-git-tag-version --allow-same-version

      - name: Organize dist files
        run: |
          set -x # Enable command tracing

          # Get the current package version
          VERSION=$(jq -r .version package.json)
          echo "VERSION variable is: $VERSION"

          # List contents of dist-temp for debugging
          echo "Contents of dist-temp before organizing:"
          ls -R dist-temp || echo "dist-temp not found or empty"

          # Define paths and names
          TEMP_DIR="dist-temp"
          VERSIONED_DIR="dist/$VERSION"
          LATEST_DIR="dist/latest"
          BUNDLE_NAME="milkdown-crepe-bundle.umd"
          JS_FILE="$BUNDLE_NAME.js"
          CSS_FILE="$BUNDLE_NAME.css"
          SOURCE_JS_PATH="$TEMP_DIR/$JS_FILE"
          SOURCE_CSS_PATH="$TEMP_DIR/$CSS_FILE"
          VERSIONED_JS_PATH="$VERSIONED_DIR/$BUNDLE_NAME-$VERSION.js"
          VERSIONED_MIN_JS_PATH="$VERSIONED_DIR/$BUNDLE_NAME-$VERSION.min.js"
          VERSIONED_CSS_PATH="$VERSIONED_DIR/$BUNDLE_NAME-$VERSION.css"
          LATEST_JS_PATH="$LATEST_DIR/$BUNDLE_NAME.js"
          LATEST_MIN_JS_PATH="$LATEST_DIR/$BUNDLE_NAME.min.js"
          LATEST_CSS_PATH="$LATEST_DIR/$BUNDLE_NAME.css"

          # Create versioned directory
          mkdir -p $VERSIONED_DIR

          # Copy JS and CSS to versioned directory
          cp $SOURCE_JS_PATH $VERSIONED_JS_PATH
          cp $SOURCE_CSS_PATH $VERSIONED_CSS_PATH

          # Create minified JS version and save to versioned directory
          npx terser $SOURCE_JS_PATH -o $VERSIONED_MIN_JS_PATH --compress --mangle

          # Create a 'latest' directory for easy access
          rm -rf $LATEST_DIR
          mkdir -p $LATEST_DIR

          # Copy versioned files (JS and CSS) to latest directory
          cp $VERSIONED_JS_PATH $LATEST_JS_PATH
          cp $VERSIONED_MIN_JS_PATH $LATEST_MIN_JS_PATH
          cp $VERSIONED_CSS_PATH $LATEST_CSS_PATH

          # List contents of dist for debugging before cleanup
          echo "Contents of dist before cleaning dist-temp:"
          ls -R dist || echo "dist not found or empty"

          # Clean up temporary directory
          rm -rf $TEMP_DIR

      - name: Check for changes in dist directory
        id: check_dist_changes
        run: |
          if [[ -n $(git status --porcelain dist) ]]; then
            echo "Dist directory has changes."
            echo "dist_changed=true" >> $GITHUB_ENV
          else
            echo "No changes in dist directory."
            echo "dist_changed=false" >> $GITHUB_ENV
          fi

      - name: Commit and push changes
        if: env.changes == 'true' || steps.check_dist_changes.outputs.dist_changed == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add dist/
          git commit -m "build: update @milkdown/crepe to v${{ env.new_version }} and rebuild"
          git push

      - name: Create and push version tag
        if: env.changes == 'true' || steps.check_dist_changes.outputs.dist_changed == 'true'
        run: |
          git tag v${{ env.new_version }}
          git push origin v${{ env.new_version }}

      - name: Update latest tag
        if: env.changes == 'true' || steps.check_dist_changes.outputs.dist_changed == 'true'
        run: |
          git tag -f latest
          git push -f origin latest
