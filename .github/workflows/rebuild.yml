name: Rebuild Bundles on Milkdown Crepe Update

on:
  schedule:
    - cron: '0 8 * * *' # Runs daily at 8:00 AM UTC
  workflow_dispatch: # Allows manual triggering of the workflow

jobs:
  rebuild:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install npm-check-updates
        run: npm install -g npm-check-updates

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Check for updates, build, organize, and stage changes
        id: build_and_stage
        run: |
          set -e # Exit immediately if a command exits with a non-zero status.

          echo "--- Starting daily build and organization ---"
          echo "Running npm install..."
          npm install

          echo "Running npm run build..."
          npm run build # This outputs to dist-temp

          echo "Organizing dist files..."
          set -x # Enable command tracing for this section

          # Remove old top-level files from dist, if they exist
          rm -f dist/milkdown-crepe-bundle.umd.js
          rm -f dist/milkdown-crepe-bundle.umd.css

          # Get the current package version
          VERSION=$(jq -r .version package.json)
          echo "VERSION variable is: $VERSION"

          # List contents of dist-temp for debugging
          echo "Contents of dist-temp before organizing:"
          ls -R dist-temp || echo "dist-temp not found or empty"

          # Define paths and names
          TEMP_DIR="dist-temp"
          VERSIONED_DIR="dist/$VERSION"
          LATEST_DIR="dist/latest"
          BUNDLE_NAME="milkdown-crepe-bundle.umd"
          JS_FILE="$BUNDLE_NAME.js"
          CSS_FILE="$BUNDLE_NAME.css"
          SOURCE_JS_PATH="$TEMP_DIR/$JS_FILE"
          SOURCE_CSS_PATH="$TEMP_DIR/$CSS_FILE"
          VERSIONED_JS_PATH="$VERSIONED_DIR/$BUNDLE_NAME-$VERSION.js"
          VERSIONED_MIN_JS_PATH="$VERSIONED_DIR/$BUNDLE_NAME-$VERSION.min.js"
          VERSIONED_CSS_PATH="$VERSIONED_DIR/$BUNDLE_NAME-$VERSION.css"
          LATEST_JS_PATH="$LATEST_DIR/$BUNDLE_NAME.js"
          LATEST_MIN_JS_PATH="$LATEST_DIR/$BUNDLE_NAME.min.js"
          LATEST_CSS_PATH="$LATEST_DIR/$BUNDLE_NAME.css"

          # Create versioned directory
          mkdir -p $VERSIONED_DIR

          # Copy JS and CSS to versioned directory
          cp $SOURCE_JS_PATH $VERSIONED_JS_PATH
          cp $SOURCE_CSS_PATH $VERSIONED_CSS_PATH

          # Create minified JS version and save to versioned directory
          npx terser $SOURCE_JS_PATH -o $VERSIONED_MIN_JS_PATH --compress --mangle

          # Create a 'latest' directory for easy access
          rm -rf $LATEST_DIR
          mkdir -p $LATEST_DIR

          # Copy versioned files (JS and CSS) to latest directory
          cp $VERSIONED_JS_PATH $LATEST_JS_PATH
          cp $VERSIONED_MIN_JS_PATH $LATEST_MIN_JS_PATH
          cp $VERSIONED_CSS_PATH $LATEST_CSS_PATH

          # List contents of dist for debugging before cleanup
          echo "Contents of dist before cleaning dist-temp:"
          ls -R dist || echo "dist not found or empty"

          # Clean up temporary directory
          rm -rf $TEMP_DIR
          set +x # Disable command tracing
          echo "--- Build and organization complete ---"

          # Always set changes=true to ensure subsequent steps run
          echo "changes=true" >> $GITHUB_OUTPUT

      - name: Get current package version for tagging
        if: steps.build_and_stage.outputs.changes == 'true'
        id: get_version
        run: |
          echo "new_version=$(jq -r .version package.json)" >> $GITHUB_ENV

      - name: Update package.json version (if needed, though usually handled by ncu -u)
        if: steps.build_and_stage.outputs.changes == 'true'
        run: |
          # This step is primarily for ensuring the package.json version matches the intended release version
          # It uses the version from package.json itself, which should be updated by ncu -u if dependencies changed
          # Or it's the existing version if only dist was missing.
          npm version ${{ env.new_version }} --no-git-tag-version --allow-same-version

      - name: Commit and push changes
        if: steps.build_and_stage.outputs.changes == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add . # Stage all changes in the working directory
          git commit -m "build: update @milkdown/crepe to v${{ env.new_version }} and rebuild"
          git push

      - name: Create and push version tag
        if: steps.build_and_stage.outputs.changes == 'true'
        run: |
          git tag v${{ env.new_version }}
          git push origin v${{ env.new_version }} --force

      - name: Update latest tag
        if: steps.build_and_stage.outputs.changes == 'true'
        run: |
          git tag -f latest
          git push -f origin latest
